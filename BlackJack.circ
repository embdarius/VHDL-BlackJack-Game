<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(1000,1440)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(1110,1410)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(1280,1770)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1280,1790)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1280,1810)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1280,1830)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1300,1190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1310,680)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1310,700)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1530,660)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1650,980)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1680,1310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1740,800)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1750,960)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1760,1130)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1760,1290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1780,710)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1870,730)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(2090,800)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2090,820)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2130,1130)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2130,1150)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2130,1170)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2170,840)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(270,1520)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(310,1400)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(390,690)" name="Clock"/>
    <comp lib="0" loc="(420,1370)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(510,670)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,710)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,730)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,750)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,770)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,790)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,890)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,910)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,930)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,950)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(550,1200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(690,1820)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(730,670)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(730,690)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(730,710)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(730,730)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(730,850)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(730,950)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(750,870)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(760,890)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(800,1940)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(960,1560)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="5" loc="(1210,1470)" name="7-Segment Display"/>
    <comp lib="5" loc="(1330,1470)" name="7-Segment Display"/>
    <comp lib="5" loc="(520,1430)" name="7-Segment Display"/>
    <comp lib="5" loc="(640,1430)" name="7-Segment Display"/>
    <comp lib="5" loc="(780,1750)" name="7-Segment Display"/>
    <comp lib="5" loc="(900,1750)" name="7-Segment Display"/>
    <comp loc="(1040,540)" name="and_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1040,680)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1050,620)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1050,830)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1270,970)" name="xor_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1280,1770)" name="SuitLed">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1290,850)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1300,1190)" name="ScoreCounter">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1300,760)" name="demux1to2">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1310,660)" name="FisherYates2">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1650,800)" name="CardValueP1Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1650,960)" name="AdderP1">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1670,1130)" name="CardValueP2Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1680,1290)" name="AdderP2">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1740,710)" name="DecoderCardValue">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2090,800)" name="ComparatorP1">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2130,1130)" name="ComparatorP2">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(250,1400)" name="BCDto7LEFT">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2520,1030)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2590,910)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(260,1520)" name="BcdTo7RIGHT">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(380,850)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(400,1710)" name="and_gate_6bits">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(550,1200)" name="ScoreCounter">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(690,1820)" name="bcdto7_left_draw">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(730,670)" name="UC">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(800,1940)" name="bcdto7_right_draw">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(940,1440)" name="BCDto7LEFT">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(950,1560)" name="BcdTo7RIGHT">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(1030,1680)" to="(1030,1790)"/>
    <wire from="(1030,1790)" to="(1060,1790)"/>
    <wire from="(1030,720)" to="(1030,760)"/>
    <wire from="(1030,720)" to="(1050,720)"/>
    <wire from="(1030,760)" to="(1030,1200)"/>
    <wire from="(1030,760)" to="(1080,760)"/>
    <wire from="(1040,540)" to="(1060,540)"/>
    <wire from="(1040,680)" to="(1070,680)"/>
    <wire from="(1050,620)" to="(1050,660)"/>
    <wire from="(1050,660)" to="(1050,720)"/>
    <wire from="(1050,660)" to="(1090,660)"/>
    <wire from="(1050,830)" to="(1080,830)"/>
    <wire from="(1060,1330)" to="(1300,1330)"/>
    <wire from="(1060,1660)" to="(1060,1770)"/>
    <wire from="(1060,1660)" to="(1370,1660)"/>
    <wire from="(1060,540)" to="(1060,600)"/>
    <wire from="(1060,630)" to="(1060,1330)"/>
    <wire from="(1060,630)" to="(1080,630)"/>
    <wire from="(1070,680)" to="(1070,700)"/>
    <wire from="(1070,700)" to="(1080,700)"/>
    <wire from="(1070,730)" to="(1070,850)"/>
    <wire from="(1070,730)" to="(1080,730)"/>
    <wire from="(1070,870)" to="(1070,930)"/>
    <wire from="(1080,590)" to="(1080,630)"/>
    <wire from="(1080,590)" to="(1840,590)"/>
    <wire from="(1080,680)" to="(1080,700)"/>
    <wire from="(1080,680)" to="(1090,680)"/>
    <wire from="(1080,700)" to="(1080,730)"/>
    <wire from="(1080,780)" to="(1080,830)"/>
    <wire from="(1100,740)" to="(1100,950)"/>
    <wire from="(1100,950)" to="(1270,950)"/>
    <wire from="(1130,1340)" to="(1140,1340)"/>
    <wire from="(1130,1350)" to="(1220,1350)"/>
    <wire from="(1130,1360)" to="(1290,1360)"/>
    <wire from="(1130,1370)" to="(1280,1370)"/>
    <wire from="(1130,1380)" to="(1260,1380)"/>
    <wire from="(1130,1390)" to="(1240,1390)"/>
    <wire from="(1130,1400)" to="(1230,1400)"/>
    <wire from="(1140,1340)" to="(1140,1410)"/>
    <wire from="(1140,1410)" to="(1210,1410)"/>
    <wire from="(1140,1440)" to="(1140,1500)"/>
    <wire from="(1140,1440)" to="(1340,1440)"/>
    <wire from="(1150,1510)" to="(1150,1620)"/>
    <wire from="(1150,1620)" to="(1330,1620)"/>
    <wire from="(1170,1420)" to="(1170,1490)"/>
    <wire from="(1170,1420)" to="(1330,1420)"/>
    <wire from="(1170,1530)" to="(1170,1600)"/>
    <wire from="(1170,1600)" to="(1360,1600)"/>
    <wire from="(1180,1460)" to="(1180,1540)"/>
    <wire from="(1180,1460)" to="(1360,1460)"/>
    <wire from="(1190,1450)" to="(1190,1550)"/>
    <wire from="(1190,1450)" to="(1350,1450)"/>
    <wire from="(1200,1520)" to="(1200,1580)"/>
    <wire from="(1200,1580)" to="(1340,1580)"/>
    <wire from="(1210,1410)" to="(1210,1470)"/>
    <wire from="(1210,1480)" to="(1210,1510)"/>
    <wire from="(1210,1530)" to="(1210,1560)"/>
    <wire from="(1210,1560)" to="(1290,1560)"/>
    <wire from="(1220,1350)" to="(1220,1470)"/>
    <wire from="(1220,1530)" to="(1220,1550)"/>
    <wire from="(1220,1550)" to="(1280,1550)"/>
    <wire from="(1230,1400)" to="(1230,1470)"/>
    <wire from="(1230,1530)" to="(1230,1540)"/>
    <wire from="(1230,1540)" to="(1260,1540)"/>
    <wire from="(1240,1390)" to="(1240,1470)"/>
    <wire from="(1260,1380)" to="(1260,1540)"/>
    <wire from="(1270,950)" to="(1270,970)"/>
    <wire from="(1280,1130)" to="(1450,1130)"/>
    <wire from="(1280,1370)" to="(1280,1550)"/>
    <wire from="(1280,840)" to="(1280,1130)"/>
    <wire from="(1280,840)" to="(1300,840)"/>
    <wire from="(1290,1360)" to="(1290,1560)"/>
    <wire from="(1290,850)" to="(1360,850)"/>
    <wire from="(130,1680)" to="(130,1730)"/>
    <wire from="(130,1680)" to="(700,1680)"/>
    <wire from="(130,1730)" to="(180,1730)"/>
    <wire from="(1300,1330)" to="(1300,1390)"/>
    <wire from="(1300,1390)" to="(1370,1390)"/>
    <wire from="(1300,760)" to="(1300,770)"/>
    <wire from="(1300,770)" to="(1330,770)"/>
    <wire from="(1300,780)" to="(1300,840)"/>
    <wire from="(1310,1260)" to="(1310,1310)"/>
    <wire from="(1310,1310)" to="(1460,1310)"/>
    <wire from="(1310,660)" to="(1470,660)"/>
    <wire from="(1310,760)" to="(1310,980)"/>
    <wire from="(1310,760)" to="(1450,760)"/>
    <wire from="(1310,980)" to="(1310,1260)"/>
    <wire from="(1310,980)" to="(1430,980)"/>
    <wire from="(1320,1320)" to="(1320,1380)"/>
    <wire from="(1320,1380)" to="(1380,1380)"/>
    <wire from="(1330,1420)" to="(1330,1470)"/>
    <wire from="(1330,1530)" to="(1330,1620)"/>
    <wire from="(1330,770)" to="(1330,800)"/>
    <wire from="(1330,800)" to="(1430,800)"/>
    <wire from="(1340,1440)" to="(1340,1470)"/>
    <wire from="(1340,1530)" to="(1340,1580)"/>
    <wire from="(1350,1450)" to="(1350,1470)"/>
    <wire from="(1350,1530)" to="(1350,1570)"/>
    <wire from="(1350,1570)" to="(1360,1570)"/>
    <wire from="(1350,740)" to="(1360,740)"/>
    <wire from="(1360,1000)" to="(1360,1150)"/>
    <wire from="(1360,1000)" to="(1430,1000)"/>
    <wire from="(1360,1150)" to="(1360,1330)"/>
    <wire from="(1360,1150)" to="(1450,1150)"/>
    <wire from="(1360,1330)" to="(1460,1330)"/>
    <wire from="(1360,1460)" to="(1360,1470)"/>
    <wire from="(1360,1570)" to="(1360,1600)"/>
    <wire from="(1360,740)" to="(1360,820)"/>
    <wire from="(1360,740)" to="(1520,740)"/>
    <wire from="(1360,820)" to="(1360,850)"/>
    <wire from="(1360,820)" to="(1430,820)"/>
    <wire from="(1360,850)" to="(1360,1000)"/>
    <wire from="(1370,1390)" to="(1370,1660)"/>
    <wire from="(1380,1380)" to="(1380,1490)"/>
    <wire from="(1380,1490)" to="(1870,1490)"/>
    <wire from="(1410,840)" to="(1410,880)"/>
    <wire from="(1410,840)" to="(1430,840)"/>
    <wire from="(1410,880)" to="(1700,880)"/>
    <wire from="(1410,930)" to="(1410,960)"/>
    <wire from="(1410,930)" to="(1670,930)"/>
    <wire from="(1410,960)" to="(1430,960)"/>
    <wire from="(1420,1170)" to="(1420,1220)"/>
    <wire from="(1420,1170)" to="(1450,1170)"/>
    <wire from="(1420,1220)" to="(1750,1220)"/>
    <wire from="(1440,1250)" to="(1440,1290)"/>
    <wire from="(1440,1250)" to="(1710,1250)"/>
    <wire from="(1440,1290)" to="(1460,1290)"/>
    <wire from="(1450,1130)" to="(1460,1130)"/>
    <wire from="(1450,690)" to="(1450,760)"/>
    <wire from="(1450,690)" to="(1760,690)"/>
    <wire from="(1470,660)" to="(1470,710)"/>
    <wire from="(1470,660)" to="(1530,660)"/>
    <wire from="(1470,710)" to="(1520,710)"/>
    <wire from="(1520,730)" to="(1520,740)"/>
    <wire from="(160,840)" to="(160,850)"/>
    <wire from="(160,840)" to="(170,840)"/>
    <wire from="(160,870)" to="(160,990)"/>
    <wire from="(160,990)" to="(790,990)"/>
    <wire from="(1650,800)" to="(1670,800)"/>
    <wire from="(1650,960)" to="(1700,960)"/>
    <wire from="(1670,1130)" to="(1680,1130)"/>
    <wire from="(1670,800)" to="(1670,930)"/>
    <wire from="(1670,800)" to="(1710,800)"/>
    <wire from="(1680,1050)" to="(1680,1130)"/>
    <wire from="(1680,1130)" to="(1710,1130)"/>
    <wire from="(1680,1290)" to="(1750,1290)"/>
    <wire from="(170,590)" to="(170,840)"/>
    <wire from="(170,590)" to="(750,590)"/>
    <wire from="(170,880)" to="(180,880)"/>
    <wire from="(1700,880)" to="(1700,960)"/>
    <wire from="(1700,960)" to="(1750,960)"/>
    <wire from="(1710,1130)" to="(1710,1250)"/>
    <wire from="(1710,1130)" to="(1730,1130)"/>
    <wire from="(1710,800)" to="(1710,910)"/>
    <wire from="(1710,800)" to="(1730,800)"/>
    <wire from="(1730,1100)" to="(1730,1130)"/>
    <wire from="(1730,1100)" to="(1870,1100)"/>
    <wire from="(1730,1130)" to="(1760,1130)"/>
    <wire from="(1730,770)" to="(1730,800)"/>
    <wire from="(1730,770)" to="(1830,770)"/>
    <wire from="(1730,800)" to="(1740,800)"/>
    <wire from="(1740,710)" to="(1760,710)"/>
    <wire from="(1740,730)" to="(1840,730)"/>
    <wire from="(1750,1220)" to="(1750,1290)"/>
    <wire from="(1750,1290)" to="(1760,1290)"/>
    <wire from="(1760,690)" to="(1760,710)"/>
    <wire from="(1760,710)" to="(1780,710)"/>
    <wire from="(180,1630)" to="(180,1710)"/>
    <wire from="(180,1630)" to="(690,1630)"/>
    <wire from="(1830,770)" to="(1830,940)"/>
    <wire from="(1830,770)" to="(1850,770)"/>
    <wire from="(1840,590)" to="(1840,730)"/>
    <wire from="(1840,730)" to="(1870,730)"/>
    <wire from="(1850,770)" to="(1850,800)"/>
    <wire from="(1850,800)" to="(1870,800)"/>
    <wire from="(1870,1100)" to="(1870,1490)"/>
    <wire from="(1870,1100)" to="(1890,1100)"/>
    <wire from="(1890,1100)" to="(1890,1130)"/>
    <wire from="(1890,1130)" to="(1910,1130)"/>
    <wire from="(20,1090)" to="(20,1400)"/>
    <wire from="(20,1090)" to="(930,1090)"/>
    <wire from="(20,1400)" to="(20,1520)"/>
    <wire from="(20,1400)" to="(30,1400)"/>
    <wire from="(20,1520)" to="(40,1520)"/>
    <wire from="(2090,770)" to="(2090,800)"/>
    <wire from="(2090,770)" to="(2230,770)"/>
    <wire from="(2090,840)" to="(2160,840)"/>
    <wire from="(2130,1070)" to="(2130,1130)"/>
    <wire from="(2130,1070)" to="(2300,1070)"/>
    <wire from="(2130,1170)" to="(2130,1190)"/>
    <wire from="(2130,1190)" to="(2220,1190)"/>
    <wire from="(2160,840)" to="(2160,910)"/>
    <wire from="(2160,840)" to="(2170,840)"/>
    <wire from="(2160,910)" to="(2370,910)"/>
    <wire from="(2220,950)" to="(2220,1190)"/>
    <wire from="(2220,950)" to="(2370,950)"/>
    <wire from="(2230,1030)" to="(2300,1030)"/>
    <wire from="(2230,770)" to="(2230,1030)"/>
    <wire from="(2300,1050)" to="(2300,1070)"/>
    <wire from="(2320,460)" to="(2320,850)"/>
    <wire from="(2320,850)" to="(2600,850)"/>
    <wire from="(2340,1000)" to="(2530,1000)"/>
    <wire from="(2340,490)" to="(2340,1000)"/>
    <wire from="(2370,930)" to="(2370,950)"/>
    <wire from="(250,1220)" to="(280,1220)"/>
    <wire from="(250,1400)" to="(280,1400)"/>
    <wire from="(250,940)" to="(250,1220)"/>
    <wire from="(250,940)" to="(380,940)"/>
    <wire from="(2520,1030)" to="(2530,1030)"/>
    <wire from="(2530,1000)" to="(2530,1030)"/>
    <wire from="(2590,910)" to="(2600,910)"/>
    <wire from="(260,1520)" to="(270,1520)"/>
    <wire from="(2600,850)" to="(2600,910)"/>
    <wire from="(280,1150)" to="(280,1220)"/>
    <wire from="(280,1150)" to="(740,1150)"/>
    <wire from="(280,1220)" to="(330,1220)"/>
    <wire from="(280,1370)" to="(280,1400)"/>
    <wire from="(280,1370)" to="(420,1370)"/>
    <wire from="(280,1400)" to="(310,1400)"/>
    <wire from="(290,1450)" to="(480,1450)"/>
    <wire from="(290,1460)" to="(450,1460)"/>
    <wire from="(290,1470)" to="(460,1470)"/>
    <wire from="(290,1480)" to="(510,1480)"/>
    <wire from="(290,1490)" to="(480,1490)"/>
    <wire from="(290,1500)" to="(490,1500)"/>
    <wire from="(290,1510)" to="(500,1510)"/>
    <wire from="(310,1030)" to="(310,1200)"/>
    <wire from="(310,1030)" to="(750,1030)"/>
    <wire from="(310,1200)" to="(330,1200)"/>
    <wire from="(350,490)" to="(2340,490)"/>
    <wire from="(350,490)" to="(350,830)"/>
    <wire from="(350,830)" to="(510,830)"/>
    <wire from="(360,460)" to="(2320,460)"/>
    <wire from="(360,460)" to="(360,810)"/>
    <wire from="(360,810)" to="(510,810)"/>
    <wire from="(380,850)" to="(380,940)"/>
    <wire from="(390,690)" to="(440,690)"/>
    <wire from="(400,1050)" to="(1680,1050)"/>
    <wire from="(400,1710)" to="(470,1710)"/>
    <wire from="(400,870)" to="(400,1050)"/>
    <wire from="(400,870)" to="(510,870)"/>
    <wire from="(440,1020)" to="(820,1020)"/>
    <wire from="(440,1300)" to="(450,1300)"/>
    <wire from="(440,1310)" to="(530,1310)"/>
    <wire from="(440,1320)" to="(600,1320)"/>
    <wire from="(440,1330)" to="(590,1330)"/>
    <wire from="(440,1340)" to="(570,1340)"/>
    <wire from="(440,1350)" to="(550,1350)"/>
    <wire from="(440,1360)" to="(540,1360)"/>
    <wire from="(440,540)" to="(440,690)"/>
    <wire from="(440,540)" to="(820,540)"/>
    <wire from="(440,690)" to="(510,690)"/>
    <wire from="(440,850)" to="(440,1020)"/>
    <wire from="(440,850)" to="(510,850)"/>
    <wire from="(450,1300)" to="(450,1370)"/>
    <wire from="(450,1370)" to="(520,1370)"/>
    <wire from="(450,1400)" to="(450,1460)"/>
    <wire from="(450,1400)" to="(650,1400)"/>
    <wire from="(460,1470)" to="(460,1580)"/>
    <wire from="(460,1580)" to="(640,1580)"/>
    <wire from="(470,1710)" to="(470,1820)"/>
    <wire from="(470,1820)" to="(470,1940)"/>
    <wire from="(470,1940)" to="(580,1940)"/>
    <wire from="(480,1380)" to="(480,1450)"/>
    <wire from="(480,1380)" to="(640,1380)"/>
    <wire from="(480,1490)" to="(480,1560)"/>
    <wire from="(480,1560)" to="(670,1560)"/>
    <wire from="(490,1420)" to="(490,1500)"/>
    <wire from="(490,1420)" to="(670,1420)"/>
    <wire from="(500,1410)" to="(500,1510)"/>
    <wire from="(500,1410)" to="(660,1410)"/>
    <wire from="(510,1480)" to="(510,1540)"/>
    <wire from="(510,1540)" to="(650,1540)"/>
    <wire from="(520,1370)" to="(520,1430)"/>
    <wire from="(520,1440)" to="(520,1470)"/>
    <wire from="(520,1490)" to="(520,1520)"/>
    <wire from="(520,1520)" to="(600,1520)"/>
    <wire from="(530,1310)" to="(530,1430)"/>
    <wire from="(530,1490)" to="(530,1510)"/>
    <wire from="(530,1510)" to="(590,1510)"/>
    <wire from="(540,1360)" to="(540,1430)"/>
    <wire from="(540,1490)" to="(540,1500)"/>
    <wire from="(540,1500)" to="(570,1500)"/>
    <wire from="(550,1350)" to="(550,1430)"/>
    <wire from="(570,1340)" to="(570,1500)"/>
    <wire from="(590,1330)" to="(590,1510)"/>
    <wire from="(600,1320)" to="(600,1520)"/>
    <wire from="(640,1380)" to="(640,1430)"/>
    <wire from="(640,1490)" to="(640,1580)"/>
    <wire from="(650,1400)" to="(650,1430)"/>
    <wire from="(650,1490)" to="(650,1540)"/>
    <wire from="(660,1410)" to="(660,1430)"/>
    <wire from="(660,1490)" to="(660,1530)"/>
    <wire from="(660,1530)" to="(670,1530)"/>
    <wire from="(670,1420)" to="(670,1430)"/>
    <wire from="(670,1530)" to="(670,1560)"/>
    <wire from="(690,1260)" to="(1310,1260)"/>
    <wire from="(690,1260)" to="(690,1630)"/>
    <wire from="(700,1200)" to="(1030,1200)"/>
    <wire from="(700,1200)" to="(700,1680)"/>
    <wire from="(700,1680)" to="(1030,1680)"/>
    <wire from="(710,1320)" to="(1320,1320)"/>
    <wire from="(710,1320)" to="(710,1440)"/>
    <wire from="(710,1440)" to="(710,1560)"/>
    <wire from="(710,1440)" to="(720,1440)"/>
    <wire from="(710,1560)" to="(730,1560)"/>
    <wire from="(710,1710)" to="(710,1750)"/>
    <wire from="(710,1710)" to="(780,1710)"/>
    <wire from="(710,1760)" to="(730,1760)"/>
    <wire from="(710,1770)" to="(720,1770)"/>
    <wire from="(710,1780)" to="(760,1780)"/>
    <wire from="(710,1790)" to="(730,1790)"/>
    <wire from="(710,1800)" to="(740,1800)"/>
    <wire from="(710,1810)" to="(750,1810)"/>
    <wire from="(720,1770)" to="(720,1870)"/>
    <wire from="(720,1870)" to="(780,1870)"/>
    <wire from="(730,1690)" to="(730,1760)"/>
    <wire from="(730,1690)" to="(790,1690)"/>
    <wire from="(730,1790)" to="(730,1850)"/>
    <wire from="(730,1850)" to="(800,1850)"/>
    <wire from="(730,640)" to="(730,670)"/>
    <wire from="(730,640)" to="(750,640)"/>
    <wire from="(730,750)" to="(780,750)"/>
    <wire from="(730,770)" to="(830,770)"/>
    <wire from="(730,790)" to="(810,790)"/>
    <wire from="(730,810)" to="(950,810)"/>
    <wire from="(730,830)" to="(800,830)"/>
    <wire from="(730,870)" to="(750,870)"/>
    <wire from="(730,890)" to="(760,890)"/>
    <wire from="(730,910)" to="(790,910)"/>
    <wire from="(730,930)" to="(1070,930)"/>
    <wire from="(740,1150)" to="(740,1210)"/>
    <wire from="(740,1210)" to="(1080,1210)"/>
    <wire from="(740,1740)" to="(740,1800)"/>
    <wire from="(740,1740)" to="(810,1740)"/>
    <wire from="(750,1730)" to="(750,1810)"/>
    <wire from="(750,1730)" to="(800,1730)"/>
    <wire from="(750,590)" to="(750,640)"/>
    <wire from="(750,640)" to="(800,640)"/>
    <wire from="(750,870)" to="(750,1030)"/>
    <wire from="(760,1190)" to="(1080,1190)"/>
    <wire from="(760,1780)" to="(760,1840)"/>
    <wire from="(760,1840)" to="(790,1840)"/>
    <wire from="(760,890)" to="(760,1190)"/>
    <wire from="(780,1710)" to="(780,1750)"/>
    <wire from="(780,1810)" to="(780,1870)"/>
    <wire from="(780,580)" to="(780,750)"/>
    <wire from="(780,580)" to="(810,580)"/>
    <wire from="(790,1690)" to="(790,1750)"/>
    <wire from="(790,1810)" to="(790,1840)"/>
    <wire from="(790,720)" to="(790,910)"/>
    <wire from="(790,720)" to="(810,720)"/>
    <wire from="(790,910)" to="(790,990)"/>
    <wire from="(800,1730)" to="(800,1750)"/>
    <wire from="(800,1810)" to="(800,1850)"/>
    <wire from="(800,640)" to="(800,680)"/>
    <wire from="(800,680)" to="(820,680)"/>
    <wire from="(800,830)" to="(800,880)"/>
    <wire from="(800,880)" to="(840,880)"/>
    <wire from="(810,1740)" to="(810,1750)"/>
    <wire from="(810,560)" to="(810,580)"/>
    <wire from="(810,560)" to="(820,560)"/>
    <wire from="(810,700)" to="(810,720)"/>
    <wire from="(810,700)" to="(820,700)"/>
    <wire from="(810,790)" to="(810,870)"/>
    <wire from="(810,870)" to="(820,870)"/>
    <wire from="(820,1870)" to="(870,1870)"/>
    <wire from="(820,1880)" to="(880,1880)"/>
    <wire from="(820,1890)" to="(900,1890)"/>
    <wire from="(820,1900)" to="(910,1900)"/>
    <wire from="(820,1910)" to="(920,1910)"/>
    <wire from="(820,1920)" to="(950,1920)"/>
    <wire from="(820,1930)" to="(960,1930)"/>
    <wire from="(820,850)" to="(820,870)"/>
    <wire from="(820,850)" to="(830,850)"/>
    <wire from="(820,910)" to="(1710,910)"/>
    <wire from="(820,910)" to="(820,1020)"/>
    <wire from="(830,600)" to="(1060,600)"/>
    <wire from="(830,600)" to="(830,620)"/>
    <wire from="(830,640)" to="(830,730)"/>
    <wire from="(830,730)" to="(920,730)"/>
    <wire from="(830,770)" to="(830,830)"/>
    <wire from="(840,880)" to="(840,990)"/>
    <wire from="(840,990)" to="(1050,990)"/>
    <wire from="(870,1730)" to="(870,1870)"/>
    <wire from="(870,1730)" to="(900,1730)"/>
    <wire from="(880,1720)" to="(880,1880)"/>
    <wire from="(880,1720)" to="(910,1720)"/>
    <wire from="(900,1730)" to="(900,1750)"/>
    <wire from="(900,1810)" to="(900,1890)"/>
    <wire from="(910,1720)" to="(910,1750)"/>
    <wire from="(910,1810)" to="(910,1900)"/>
    <wire from="(920,1710)" to="(920,1750)"/>
    <wire from="(920,1710)" to="(960,1710)"/>
    <wire from="(920,1810)" to="(920,1910)"/>
    <wire from="(920,730)" to="(920,740)"/>
    <wire from="(920,740)" to="(1100,740)"/>
    <wire from="(930,1720)" to="(930,1750)"/>
    <wire from="(930,1720)" to="(950,1720)"/>
    <wire from="(930,940)" to="(1830,940)"/>
    <wire from="(930,940)" to="(930,1090)"/>
    <wire from="(940,1440)" to="(970,1440)"/>
    <wire from="(950,1560)" to="(960,1560)"/>
    <wire from="(950,1720)" to="(950,1920)"/>
    <wire from="(950,810)" to="(950,970)"/>
    <wire from="(950,970)" to="(1050,970)"/>
    <wire from="(960,1710)" to="(960,1930)"/>
    <wire from="(970,1410)" to="(1110,1410)"/>
    <wire from="(970,1410)" to="(970,1440)"/>
    <wire from="(970,1440)" to="(1000,1440)"/>
    <wire from="(980,1490)" to="(1170,1490)"/>
    <wire from="(980,1500)" to="(1140,1500)"/>
    <wire from="(980,1510)" to="(1150,1510)"/>
    <wire from="(980,1520)" to="(1200,1520)"/>
    <wire from="(980,1530)" to="(1170,1530)"/>
    <wire from="(980,1540)" to="(1180,1540)"/>
    <wire from="(980,1550)" to="(1190,1550)"/>
  </circuit>
  <vhdl name="FisherYates2">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;fiecare numar din array corespunde cu o carte, iar la fiecare extragere cartea se interschimba cu output_signal 
--astfel dupa fiecare parcurgere sirul va fi complet diferit fata de tura trecuta 
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
&#13;
ENTITY FisherYates2 IS&#13;
  PORT (&#13;clk: in std_logic;
  	   reset: in std_logic;
  	   card_out: out std_logic_vector(5 downto 0);
  	   index_out :out std_logic_vector(5 downto 0);
  	   output_signal_test: out std_logic_vector(5 downto 0)

    );&#13;
END FisherYates2;&#13;
&#13;


architecture behavioural of FisherYates2 is
type card_array is array (0 to 51) of std_logic_vector(5 downto 0);
signal deck: card_array := (	"011101", "001111", "000101", "101001", "011010", "011110",
						"100010", "011000", "010010", "100110", "000110", "101111",
						"110100", "100001", "001001", "100111", "010100", "000111",
						"010011", "101010", "101110", "011011", "001010", "110001",
						"110101", "100011", "010111", "011001", "101000", "001011",
						"010000", "000001", "001100", "110011", "100101", "101100",
						"000011", "110010", "101101", "001110", "011100", "101011",
						"110110", "001101", "010110", "000010", "011111", "010101",
						"100000", "100100", "101010", "110000"
);

signal current_index : std_logic_vector(5 downto 0) := "000000";
signal temp : std_logic_vector(5 downto 0):= "000000";
signal output_signal : std_logic_vector(5 downto 0) := "000000";


BEGIN


	
	process(clk,reset )
	begin

		if(reset = '1') then 
			current_index &lt;= "000000";
			deck &lt;= (   	"011101", "001111", "000101", "101001", "011010", "011110",
						"100010", "011000", "010010", "100110", "000110", "101111",
						"110100", "100001", "001001", "100111", "010100", "000111",
						"010011", "101010", "101110", "011011", "001010", "110001",
						"110101", "100011", "010111", "011001", "101000", "001011",
						"010000", "000001", "001100", "110011", "100101", "101100",
						"000011", "110010", "101101", "001110", "011100", "101011",
						"110110", "001101", "010110", "000010", "011111", "010101",
						"100000", "100100", "101010", "110000"

				    );
			
		elsif(rising_edge(clk)) then
		
			if(current_index = "110011") then 
				current_index &lt;= "000000";
			else 
				temp &lt;= deck(to_integer(unsigned(current_index)));
				deck(to_integer(unsigned(current_index))) &lt;= deck(to_integer(unsigned(output_signal)));
				deck(to_integer(unsigned(output_signal))) &lt;= temp;
				current_index &lt;= current_index + 1;

			end if;
			output_signal &lt;= deck(to_integer(unsigned(current_index)) mod 3);
		end if;
	card_out &lt;= deck(to_integer(unsigned(current_index)));
	index_out &lt;= current_index;
	output_signal_test &lt;= output_signal;
	
	end process;


END behavioural;

</vhdl>
  <vhdl name="CardValueP1Register">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY CardValueP1Register IS&#13;
  PORT (&#13;CLK: in std_logic;
  	   RESET: in std_logic;
  	   value_in : in std_logic_vector(5 downto 0);
  	   value_out: out std_logic_vector(5 downto 0)
    );&#13;
END CardValueP1Register;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF CardValueP1Register IS&#13;
signal output : std_logic_vector(5 downto 0) := "000000";

&#13;
BEGIN&#13;
	process(CLK, RESET)
	begin	
		if RESET = '1' then 
			output &lt;= "000000";
		elsif rising_edge(CLK) then 
			output &lt;= value_in;
		end if;

	value_out &lt;= output;
	end process;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="AdderP1">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

&#13;
ENTITY AdderP1 IS&#13;
  port(A: in std_logic_vector(5 downto 0);
  	  B: in std_logic_vector(5 downto 0);
  	  RESET: in std_logic;

  	  sum: out std_logic_vector(5 downto 0);
  	  cout: out std_logic
    );&#13;
END AdderP1;&#13;

architecture arh1 of AdderP1 is
  signal output : std_logic_vector(5 downto 0) := "000000";
  signal carryOut : std_logic := '0';

begin
  process(A, B, RESET)
    variable carry : std_logic := '0';
    variable sum : std_logic_vector(5 downto 0) := "000000";
  begin
    if RESET = '1' then
      carry := '0';
      sum := (others =&gt; '0');
    else
      for i in 0 to 5 loop
        sum(i) := A(i) xor B(i) xor carry;
        carry := (A(i) and B(i)) or (carry and (A(i) xor B(i)));
      end loop;
    end if;

    output &lt;= sum;
    carryOut &lt;= carry;
  end process;
  
  sum &lt;= output;
  cout &lt;= carryOut;
  
end arh1;

	</vhdl>
  <vhdl name="HeartsAdder">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
&#13;
ENTITY HeartsAdder IS&#13;
  PORT (&#13;CLK: in std_logic;
  	   data_in : in std_logic_vector(2 downto 0);
  	   data_out : out std_logic_vector(2 downto 0);
  	   RESET: in std_logic;

  	   reached_max: out std_logic
    );&#13;
END HeartsAdder;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF HeartsAdder IS&#13;
signal count : std_logic_vector(2 downto 0) := "000";
signal max: std_logic := '0';

&#13;
BEGIN&#13;
	process(CLK, RESET)
	begin
		if RESET = '1' then 
			max &lt;= '0';
			count &lt;= "000";
		elsif rising_edge(CLK) then 
			if count = "011" then
				max &lt;= '1';
			else 
				max &lt;= '0';
				count &lt;= count + 1;
			end if;
		end if;

	end process;
	data_out &lt;= count;
	reached_max &lt;= max;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="FisherYatesSUIT">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--

--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

ENTITY FisherYatesSUIT IS
  PORT (
clk: in std_logic;
  	   reset: in std_logic;
  	   card_out: out std_logic_vector(2 downto 0);
  	   index_out :out std_logic_vector(3 downto 0);
  	   output_signal_test: out std_logic_vector(2 downto 0)

    );
END FisherYatesSUIT;



architecture behavioural of FisherYatesSUIT is
type card_array is array (0 to 15) of std_logic_vector(2 downto 0);
signal deck: card_array := ("100", "001", "011", "010", "100", "010", "011", "001", "001", "011", "100", "010", "011", "001", 
						"010", "100"	);

signal current_index : std_logic_vector(3 downto 0) := "0000";
signal temp : std_logic_vector(2 downto 0):= "000";
signal output_signal : std_logic_vector(2 downto 0) := "000";


BEGIN


	
	process(clk,reset )
	begin

		if(reset = '1') then 
			current_index &lt;= "0000";
			deck &lt;= (   	"100", "001", "011", "010", "100", "010", "011", "001", "001", "011", "100", "010", "011", "001", 
						"010", "100"	
				    );
			
		elsif(rising_edge(clk)) then
		
			if(current_index = "1110") then 
				current_index &lt;= "0000";
			else 
				temp &lt;= deck(to_integer(unsigned(current_index)));
				deck(to_integer(unsigned(current_index))) &lt;= deck(to_integer(unsigned(output_signal)));
				deck(to_integer(unsigned(output_signal))) &lt;= temp;
				current_index &lt;= current_index + 1;

			end if;
			output_signal &lt;= deck(to_integer(unsigned(current_index)));
		end if;
	card_out &lt;= deck(to_integer(unsigned(current_index)));
	index_out &lt;= current_index;
	output_signal_test &lt;= output_signal;
	
	end process;


END behavioural;

</vhdl>
  <vhdl name="CardValueP2Register">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY CardValueP2Register IS
  PORT (
CLK: in std_logic;
  	   RESET: in std_logic;
  	   value_in : in std_logic_vector(5 downto 0);
  	   value_out: out std_logic_vector(5 downto 0)
    );
END CardValueP2Register;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF CardValueP2Register IS
signal output : std_logic_vector(5 downto 0) := "000000";


BEGIN
	process(CLK, RESET)
	begin	
		if RESET = '1' then 
			output &lt;= "000000";
		elsif rising_edge(CLK) then 
			output &lt;= value_in;
		end if;

	value_out &lt;= output;
	end process;

END TypeArchitecture;
</vhdl>
  <vhdl name="AdderP2">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;


ENTITY AdderP2 IS
  port(A: in std_logic_vector(5 downto 0);
  	  B: in std_logic_vector(5 downto 0);
  	  RESET: in std_logic;

  	  sum: out std_logic_vector(5 downto 0);
  	  cout: out std_logic
    );
END AdderP2;

architecture arh1 of AdderP2 is
  signal output : std_logic_vector(5 downto 0) := "000000";
  signal carryOut : std_logic := '0';

begin
  process(A, B, RESET)
    variable carry : std_logic := '0';
    variable sum : std_logic_vector(5 downto 0) := "000000";
  begin
    if RESET = '1' then
      carry := '0';
      sum := (others =&gt; '0');
    else
      for i in 0 to 5 loop
        sum(i) := A(i) xor B(i) xor carry;
        carry := (A(i) and B(i)) or (carry and (A(i) xor B(i)));
      end loop;
    end if;

    output &lt;= sum;
    carryOut &lt;= carry;
  end process;
  
  sum &lt;= output;
  cout &lt;= carryOut;
  
end arh1;

	</vhdl>
  <vhdl name="ComparatorP1">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
&#13;
ENTITY ComparatorP1 IS&#13;
  PORT (&#13;A: in std_logic_vector(5 downto 0);
  	   
	   Over21: out std_logic;
	   Under21: out std_logic;
	   Is21: out std_logic
    );&#13;
END ComparatorP1;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF ComparatorP1 IS&#13;
&#13;
BEGIN&#13;

	Over21 &lt;= '1' when (unsigned(A) &gt; 21) else '0';
	Under21 &lt;= '1' when (unsigned(A) &lt; 21) else '0';
	Is21 &lt;= '1' when (unsigned(A) = 21) else '0';
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="ComparatorP2">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

ENTITY ComparatorP2 IS
  PORT (
	   A: in std_logic_vector(5 downto 0);

	   Over21: out std_logic;
	   Under21: out std_logic;
	   Is21: out std_logic
    );
END ComparatorP2;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF ComparatorP2 IS
signal bust : std_logic := '0';
signal under : std_logic := '0';
signal blackjack : std_logic := '0';

BEGIN

	Over21 &lt;= '1' when (unsigned(A) &gt; 21) else '0';
	Under21 &lt;= '1' when (unsigned(A) &lt; 21) else '0';
	Is21 &lt;= '1' when (unsigned(A) = 21) else '0';


END TypeArchitecture;
</vhdl>
  <vhdl name="UC">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13; CAND VA FI ACTIVAT ENABLE_FISHER_YATES, folosind o poarta AND se va activa clock ul la FISHER YATES RANDOM GENERATOR
--astfel generandu-se carti (daca jucatorul trage carti) 
--------------------------------------------------------------------------------&#13;

-- DE FACUT:
	--MOMENTAN DACA SE APASA STAND SI MERGE CLOCK-UL, SE EXTRAGE O CARTE INAINTE DE A SE TRECE LA URM NIVEL
	--TREBUIE FACUT CA HIT/STAND pt jucatori sa fie independent de clock/sa activeze clock-ul in functie de 
	--BUTOANELE HIT STAND CU PORTI LOGICE 
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
&#13;
ENTITY UC IS&#13;
  PORT (&#13;START: in std_logic;
  	   CLK: in std_logic;
  	   RESET: in std_logic;
  	   restart: in std_logic;
  	   end_game: in std_logic;
  	   P1_READY: in std_logic;
  	   P2_READY: in std_logic;


  	   idle_led: out std_logic;
  	   P1_READY_LED: out std_logic;
  	   P2_READY_LED: out std_logic;
  	   game_started: out std_logic; 	--LED

  	   enable_clk : out std_logic;

  	   
  	   demux_sel_p1 : out std_logic;
  	   demux_sel_p2: out std_logic;

	   draw_p1 : out std_logic;
	   draw_p2 : out std_logic;
	   check_win : in std_logic;
	   check_bust : in std_logic; 
	   p1_cardvalue : in std_logic_vector(5 downto 0);
	   p2_cardvalue : in std_logic_vector(5 downto 0);

	   DRAW_LED : out std_logic;
	   P1_WIN : out std_logic;
	   P2_WIN : out std_logic;

	   reset_state : out std_logic;
	   restart_state: out std_logic;
	   end_game_state: out std_logic;


  	   P1_HIT: in std_logic;
  	   P1_STAND: in std_logic;
  	   P2_HIT: In std_logic;
  	   P2_STAND: in std_logic

  	   

    );&#13;
END UC;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE beh OF UC IS&#13;
&#13;
type STARE_T is (ST0, ST1, ST2, ST3, ST4, ST5, FINAL_STATE);
signal stare, nextStare : STARE_T := ST0;

BEGIN&#13;
	Actualizare_stare: process(CLK, START)
	begin
		if rising_edge(CLK) then
			if START = '0' then stare &lt;= ST0;	
				else stare &lt;= nextStare;
			end if;
		end if;
		
	end process Actualizare_stare;

	Tranzitii_stari: process (START, P1_READY, P2_READY, CLK, P1_STAND, P2_STAND,P1_HIT, p2_hit,p1_cardvalue,p2_cardvalue, restart, reset, end_game)
	begin
		idle_led &lt;= '1'; game_started &lt;= '0'; 
		 enable_clk &lt;= '0';
		demux_sel_p1 &lt;= '0'; demux_sel_p2 &lt;= '0'; draw_led &lt;= '0'; p1_win &lt;= '0'; p2_win &lt;= '0';
		restart_state &lt;= '0'; reset_state &lt;= '0'; end_game_state &lt;= '0';
		case stare is
			when ST0 =&gt; if START = '1' and P1_READY = '1' and P2_READY = '1' then 
				         nextStare &lt;= ST1;
				        else nextStare &lt;= ST0;
				        end if;
				        
			when ST1 =&gt; game_started &lt;= '1'; idle_led &lt;= '0';
					  enable_clk &lt;= '1';
					  nextStare &lt;= ST2; demux_sel_p1 &lt;= '0';
			when ST2 =&gt; game_started &lt;= '1'; idle_led &lt;= '0';
					  enable_clk &lt;= '1'; demux_sel_p2 &lt;= '1';
					  nextStare &lt;= ST3;

					  
			when ST3 =&gt;  idle_led &lt;= '0';	
				         demux_sel_p1 &lt;= '0'; demux_sel_p2 &lt;= '0';
					  if(check_win = '1' or check_bust = '1') then
					  	nextStare &lt;= ST5;
				        
				       elsif(p1_stand = '1' and p1_hit = '0') then
				       	if(to_integer(unsigned(p1_cardvalue)) &gt; 14) then
				       		nextStare &lt;= ST4;
				       	else
				       		report "Draw more cards";
				    			nextStare &lt;= ST3;
				    		end if;
				    	end if;
					  

			
			when ST4 =&gt; idle_led &lt;= '0'; demux_sel_p2 &lt;= '1'; demux_sel_p1 &lt;= '0';
					if(check_win = '1' or check_bust = '1') then
						nextStare &lt;= ST5;
					
					
					elsif(p2_stand = '1' and p2_hit = '0') then
						if(to_integer(unsigned(p2_cardvalue)) &gt; 14) then
							nextStare &lt;= ST5;
						else
							report "Draw more cards";
							nextStare &lt;= ST4;
						end if;
					end if;
			
			when ST5 =&gt; idle_led &lt;= '0';
			if(to_integer(unsigned(p1_cardvalue)) &gt; 21 ) then
				P1_WIN &lt;= '0'; P2_win &lt;= '1'; draw_led &lt;= '0';
			elsif(to_integer(unsigned(p2_cardvalue)) &gt; 21) then
				P1_win &lt;= '1'; P2_win &lt;= '0'; draw_led &lt;= '0';
			elsif(to_integer(unsigned(p1_cardvalue)) = 21) then
				P1_win &lt;= '1'; P2_win &lt;='0'; draw_led &lt;= '0';
			elsif(to_integer(unsigned(p2_cardvalue)) = 21) then
				p2_win &lt;= '1'; p1_win &lt;='0'; draw_led &lt;= '0';
			elsif(to_integer(unsigned(p1_cardvalue)) = (to_integer(unsigned(p2_cardvalue)))) then
				DRAW_LED &lt;= '1'; P1_WIN &lt;= '0'; P2_WIN &lt;='0';
			elsif(to_integer(unsigned(p1_cardvalue)) &gt; (to_integer(unsigned(p2_cardvalue)))) then
				P1_WIN &lt;= '1'; P2_WIN &lt;= '0'; DRAW_LED &lt;= '0';
			else P2_WIN &lt;= '1' ; P1_WIN &lt;= '0'; DRAW_LED &lt;= '0';
			end if;

			if(reset = '1') then
				reset_state &lt;= '1'; restart_state &lt;= '0'; end_game_state &lt;= '0';
				nextStare &lt;= ST1;
			elsif (restart = '1') then
				restart_state &lt;= '1'; reset_state &lt;= '0'; end_game_state &lt;= '0';
				nextStare &lt;= ST1;
			elsif (END_game = '1') then
				end_game_state &lt;= '1'; reset_state &lt;= '0' ; restart_state &lt;= '0';
				nextStare &lt;= ST0;
			end if;
			
					  
					  
			when others =&gt; idle_led &lt;= '0';
					   
		end case;
	end process Tranzitii_stari;

	process(P1_HIT, check_win, check_bust)
	begin
	draw_p1 &lt;= '0';
	if(stare = st3 and check_win = '0' and check_bust = '0') then
		if(p1_hit = '1' and p1_stand ='0') then 
			draw_p1 &lt;= '1';
		end if;
	end if;


	end process;

	process(P2_HIT, check_win, check_bust)
	begin

	draw_p2 &lt;= '0';
		
	if(stare = ST4 and check_win = '0' and check_bust = '0') then
		if(p2_hit = '1' and p2_stand = '0') then
			draw_p2 &lt;= '1';
		end if;
	end if;
	end process;

	process(P1_READY, P2_READY)
	begin
		if(P1_READY = '1') then
			P1_READY_LED &lt;= '1';
		else P1_READY_LED &lt;= '0';
		end if;

		if(P2_READY = '1') then
			P2_READY_LED &lt;= '1';
		else P2_READY_LED &lt;= '0';
		end if;

	end process;

&#13;
&#13;
END beh;&#13;
</vhdl>
  <vhdl name="DecoderCardValue">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
&#13;
ENTITY DecoderCardValue IS&#13;
  PORT (&#13;value_in : in std_logic_vector(5 downto 0);
  	   RESET: in std_logic;
  	   value_out: out std_logic_vector(5 downto 0)&#13;;
  	   suit_out: out std_logic_vector(1 downto 0)
    );&#13;
END DecoderCardValue;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF DecoderCardValue IS&#13;
signal output : std_logic_vector(5 downto 0) := "000000";&#13;
signal output_suit : std_logic_vector(1 downto 0) := "00";

BEGIN&#13;
	process(RESET, value_in)
	begin
		if RESET = '1' then 
			output &lt;= "000000";
		elsif RESET = '0' then
			if (to_integer(unsigned(value_in)) &gt; 0 and to_integer(unsigned(value_in)) &lt; 14) then 
				if( to_integer(unsigned(value_in)) = 1) then
					output &lt;= "001011";
					output_suit &lt;= "00";
				elsif(to_integer(unsigned(value_in)) &gt; 1 and to_integer(unsigned(value_in)) &lt; 11) then 
					output &lt;= value_in;
					output_suit &lt;= "00";
				else 
					output &lt;= "001010";
					output_suit &lt;= "00";
				end if;
		
			elsif(to_integer(unsigned(value_in)) &gt; 13 and to_integer(unsigned(value_in)) &lt; 27) then
				if(to_integer(unsigned(value_in)) = 14) then 
					output &lt;= "001011";	-- ACE
					output_suit &lt;= "01";
				elsif(to_integer(unsigned(value_in)) &gt; 14 and to_integer(unsigned(value_in)) &lt; 24) then 
					output &lt;= value_in - 13;
					output_suit &lt;= "01";
				else 
					output &lt;= "001010";
					output_suit &lt;= "01";
				end if ;

			elsif(to_integer(unsigned(value_in)) &gt; 26 and to_integer(unsigned(value_in)) &lt; 40) then 
				if(to_integer(unsigned(value_in)) = 27) then	
					output &lt;= "001011";
					output_suit &lt;= "10";
				elsif(to_integer(unsigned(value_in)) &gt; 27 and to_integer(unsigned(value_in)) &lt; 37) then
					output &lt;= value_in - 26;
					output_suit &lt;= "10";
				else 
					output &lt;= "001010";
					output_suit &lt;= "10";
				end if;
			elsif(to_integer(unsigned(value_in)) &gt; 39 and to_integer(unsigned(value_in)) &lt; 53) then 
				if ( to_integer(unsigned(value_in)) = 40) then
					output &lt;= "001011";
					output_suit &lt;= "11";
				elsif(to_integer(unsigned(value_in)) &gt; 40 and to_integer(unsigned(value_in)) &lt; 49) then 
					output &lt;= value_in - 39;
					output_suit &lt;= "11";
				else 
					output &lt;= "001010";
					output_suit &lt;= "11";
				end if;
			else output&lt;= "111111";
				output_suit &lt;= "11";	--ERROR 

				

				
			end if;
		
				
		end if;
		



	end process;
	value_out &lt;= output;
	suit_out &lt;= output_suit;
	-- vom avea in pachet numere de la 1 la 52 
	--fiecare numar va fi o carte specifica, exact ca un pachet intreg de BJ
	-- DE la 1-13 un suit, de la 14-26 alt suit, 27-&gt;39, 40-&gt;52 
	--1 va fi AS DE HEARTS, 2-10 valoare de HEARTS, 11-13 jack queen king IN ACEASTA ORDINE DE HEARTS
	--acceeasi ordine pt urmatoarele suit-uri 
	--14 = AS DE DIAMONDS, .......  si tot asa 
	
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="and_gate">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY and_gate IS&#13;
  PORT (&#13;A,B : in std_logic;
  	   output: out std_logic
    );&#13;
END and_gate;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE structural OF and_gate IS&#13;
&#13;
BEGIN&#13;
	output &lt;= A and B;
&#13;
&#13;
END structural;&#13;
</vhdl>
  <vhdl name="BCDto7LEFT">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
&#13;
ENTITY BCDto7LEFT IS&#13;
  PORT (&#13;A: in std_logic_vector(5 downto 0);
        output : out std_logic_vector(6 downto 0)
    );&#13;
END BCDto7LEFT;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF BCDto7LEFT IS&#13;
signal out_sig : std_logic_vector(6 downto 0) := "0000000";
&#13;
BEGIN&#13;
&#13;	process(A)
	begin
	if(to_integer(unsigned(A)) &gt; 1 and to_integer(unsigned(A)) &lt; 10) then
		out_sig &lt;= "1111110";
	elsif(to_integer(unsigned(A)) = 10) then
		out_sig &lt;= "0000110";
	elsif(to_integer(unsigned(A)) &gt; 10 and to_integer(unsigned(A)) &lt; 20) then
		out_sig &lt;= "0000110";
	elsif(to_integer(unsigned(A)) &gt;19 and to_integer(unsigned(A)) &lt; 30) then
		out_sig &lt;= "1101101";
	elsif(to_integer(unsigned(A)) &gt; 29) then
		out_sig &lt;= "1111001";
	else out_sig &lt;= "1111110";
	end if;


	end process;
	output &lt;= out_sig;&#13;	

END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="BcdTo7RIGHT">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
&#13;
ENTITY BcdTo7RIGHT IS&#13;
  PORT (&#13;A: in std_logic_vector(5 downto 0);
  	   output : out std_logic_vector(6 downto 0)
    );&#13;
END BcdTo7RIGHT;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF BcdTo7RIGHT IS&#13;
signal sig : std_logic_vector(6 downto 0) := "0000000";
&#13;
BEGIN&#13;
	process(A)
	begin								--        		_
		case A is 				
		
		
		
		--|_|	


				
			when "000010" =&gt; sig &lt;= "1101101";			  	  

			
			when "000011" =&gt; sig &lt;= "1111001";
			when "000100" =&gt; sig &lt;= "0010011";
			when "000101" =&gt; sig &lt;= "1011011";
			when "000110" =&gt; sig &lt;= "0011111";		
			when "000111" =&gt; sig &lt;= "1110000";
			when "001000" =&gt; sig &lt;= "1111111";
			when "001001" =&gt; sig &lt;= "1111011";	
			when "001010" =&gt; sig &lt;= "1111110";	--10 
			when "001011" =&gt; sig &lt;= "0000110";

			when "001100" =&gt; sig &lt;= "1101101";
			when "001101" =&gt; sig &lt;= "1111001";
			when "001110" =&gt; sig &lt;= "0010011";
			when "001111" =&gt; sig &lt;= "1011011";
			when "010000" =&gt; sig &lt;= "0011111";
			when "010001" =&gt; sig &lt;= "1110000";
			when "010010" =&gt; sig &lt;= "1111111";
			when "010011" =&gt; sig &lt;= "1111011";
			when "010100" =&gt; sig &lt;= "1111110";
			when "010101" =&gt; sig &lt;= "0000110";	--21

			when "010110" =&gt; sig &lt;= "1101101";
			when "010111" =&gt; sig &lt;= "1111001";
			when "011000" =&gt; sig &lt;= "0010011";
			when "011001" =&gt; sig &lt;="1011011";
			when "011010" =&gt; sig &lt;= "0011111";
			when "011011" =&gt; sig &lt;= "1110000";
			when "011100" =&gt; sig &lt;= "1111111";
			when "011101" =&gt; sig &lt;= "1111011";
			when "011110" =&gt; sig &lt;= "1111110";
			
			when others =&gt; sig &lt;= "1111110";			
		end case;
	end process;
	output &lt;= sig;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="bcdto7_left_draw">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
&#13;
ENTITY bcdto7_left_draw IS&#13;
  PORT (&#13;A: in std_logic_vector(5 downto 0);
  	   output : out std_logic_vector(6 downto 0)
    );&#13;
END bcdto7_left_draw;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF bcdto7_left_draw IS&#13;
signal sig : std_logic_vector(6 downto 0) := "0000000";
&#13;
BEGIN&#13;
&#13;	process(A)
	begin
		if(to_integer(unsigned(A)) &gt; 1 and to_integer(unsigned(A)) &lt; 10) then
			sig &lt;= "1111110";
		elsif(to_integer(unsigned(A)) &gt; 9 and to_integer(unsigned(A)) &lt; 11) then  
			sig &lt;= "0000110";
		else sig &lt;= "1111110";
		end if;


	end process;
	output &lt;= sig;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="bcdto7_right_draw">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
&#13;
ENTITY bcdto7_right_draw IS&#13;
  PORT (&#13;A: in std_logic_vector(5 downto 0);
  	   output: out std_logic_vector(6 downto 0)
    );&#13;
END bcdto7_right_draw;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF bcdto7_right_draw IS&#13;
signal sig : std_logic_vector(6 downto 0) := "0000000";
&#13;
BEGIN&#13;
&#13;	process(A)
	begin
		case A is 
			when "000010" =&gt; sig &lt;= "1101101";			  	  

			
			when "000011" =&gt; sig &lt;= "1111001";
			when "000100" =&gt; sig &lt;= "0010011";
			when "000101" =&gt; sig &lt;= "1011011";
			when "000110" =&gt; sig &lt;= "0011111";		
			when "000111" =&gt; sig &lt;= "1110000";
			when "001000" =&gt; sig &lt;= "1111111";
			when "001001" =&gt; sig &lt;= "1111011";	
			when "001010" =&gt; sig &lt;= "1111110";	--10 
			when "001011" =&gt; sig &lt;= "0000110";
			when others =&gt; sig &lt;= "1111110";
			end case;
	end process;
&#13;
	output &lt;= sig;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="and_gate_6bits">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY and_gate_6bits IS&#13;
  PORT (&#13;A: in std_logic_vector(5 downto 0);
        B: in std_logic;
        output: out std_logic_vector(5 downto 0)
    );&#13;
END and_gate_6bits;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF and_gate_6bits IS&#13;
signal sig : std_logic_vector(5 downto 0) := "000000";&#13;

BEGIN&#13;
	process(A,B)
	begin
		if(B = '1') then
			sig &lt;= A;
		else sig &lt;= "000000";
		end if;
	end process;
	output &lt;= sig;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="SuitLed">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY SuitLed IS&#13;
  PORT (&#13;A: in std_logic_vector(1 downto 0);
  	  enable: in std_logic;
        Hearts: out std_logic;
        Diamonds: out std_logic;
        Clubs: out std_logic;
        Spades: out std_logic
    );&#13;
END SuitLed;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF SuitLed IS&#13;
&#13;
BEGIN&#13;
	Hearts &lt;= '1' when (A = "00" and enable = '1') else '0';
	Diamonds &lt;= '1' when (A = "01" and enable = '1') else '0';
	Clubs &lt;= '1' when (A = "10" and enable = '1') else '0';
	Spades &lt;= '1' when (A = "11" and enable = '1') else '0';
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="or_gate">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY or_gate IS&#13;
  PORT (&#13;A,B: in std_logic;
  	   output : out std_logic
    );&#13;
END or_gate;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF or_gate IS
signal out_sig : std_logic := '0';&#13;
&#13;
BEGIN&#13;
	process(A,B)
	begin
		if(A = '1' or B = '1') then
			out_sig &lt;= '1';
		else out_sig &lt;= '0';
		end if;

	end process;
	output &lt;= out_sig;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="xor_gate">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY xor_gate IS&#13;
  PORT (&#13;A,B : in std_logic;
  	   output : out std_logic
    );&#13;
END xor_gate;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF xor_gate IS&#13;
&#13;
BEGIN&#13;
	output &lt;= A XOR B;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="demux1to2">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY demux1to2 IS&#13;
  PORT (&#13;data_in : in std_logic;
        Select_data: in std_logic;
        I0,I1 : out std_logic
    );&#13;
END demux1to2;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF demux1to2 IS&#13;
signal i1_sig, i2_sig : std_logic := '0';

BEGIN&#13;
	process(data_in, select_data)
	begin
		if(select_data = '0') then
			if(data_in = '0') then
				i1_sig &lt;= '0';
				i2_sig &lt;= '0';
			else 
				i1_sig &lt;= '1';
				i2_sig &lt;= '0';
			end if;
		elsif(select_data = '1') then
			if(data_in = '0') then
				i1_sig &lt;= '0';
				i2_sig &lt;= '0';
			else 
				i1_sig &lt;= '0';
				i2_sig &lt;= '1';
			end if;
		end if;


	end process;
	I0 &lt;= i1_sig;
	I1 &lt;= i2_sig;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="ScoreCounter">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
&#13;
ENTITY ScoreCounter IS&#13;
  PORT (&#13;CLK : in std_logic;
  	   RESET: in std_logic;
  	   output : out std_logic_vector(5 downto 0)
  	   
    );&#13;
END ScoreCounter;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF ScoreCounter IS&#13;
signal count : std_logic_vector(5 downto 0) := "000000";
&#13;
BEGIN&#13;
	process(CLK)
	begin
		if(rising_edge(CLK)) then
			count &lt;= count + 1;
		
		end if;
	end process;
	output &lt;= count;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
</project>
